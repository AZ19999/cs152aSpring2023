const mongoose = require("mongoose");
mongoose.connect("mongodb://localhost:27017/recipe_db");
const db = mongoose.connection;
const Subscriber = require("./models/subscriber");

Subscriber.create({
  name: "test",
  email: "test@gmail.com",
  zipCode: 234,
})
  .then(() => {
    Subscriber.findOne({ name: "test" }).then((data) => {
      console.log(data);
    });
  })
  .then(() => {
    Subscriber.deleteOne({ name: "test" }).then((data) => {
      console.log("deleted");
    });
  })
  .catch((err) => {
    console.log(err);
  });

  student.js:
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const studentSchema = new Schema({
  name: {
    type: String,
    required: true
  },
  age: {
    type: Number,
    required: true
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true
  },
  address: {
    street: String,
    city: String,
    state: String,
    zip: String
  },
  courses: [{
    type: Schema.Types.ObjectId,
    ref: 'Course'
  }]
});
const Student = mongoose.model('Student', studentSchema);
module.exports = Student;
-----------------------------------

course.js:
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const courseSchema = new Schema({
  title: {
    type: String,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  instructor: {
    type: String,
    required: true
  },
  price: {
    type: Number,
    required: true
  },
  students: [{
    type: Schema.Types.ObjectId,
    ref: 'Student'
  }]
});
const Course = mongoose.model('Course', courseSchema);
module.exports = Course;

A sample solution:

--------------------------------------------
Route:
router.get(
  "/subscribers/:id",
  subscribersController.subscriber,
  subscribersController.showSubscriberView
);



------------------------------------------
controller:
subscriber: (req, res, next) => {
    let userId = req.params.id;
    Subscriber.findById(userId)
      .then((subscriber) => {
        res.locals.subscriber = subscriber;
        next();
      })
      .catch((error) => {
        console.log(`Error fetching user by ID: ${error.message}`);
        next(error);
      });
  },
  showSubscriberView: (req, res) => {
    res.render("subscribers/show");
  },



------------------------------------------------------
view:
<h1>Subscriber Data for <%= subscriber.name %></h1>
<table class="table">
  <tr>
    <th>Name</th>
    <td><%= subscriber.name %></td>
  </tr>
  <tr>
    <th>Email</th>
    <td><%= subscriber.email %></td>
  </tr>
  <tr>
    <th>Zip Code</th>
    <td><%= subscriber.zipCode %></td>
  </tr>
</table>





//message to say we updated successfully
router.post('/update/:userId', (req, res) => {
  const userId = req.params.userId;
  const updatedUserData = req.body;


  updateUserAccount(userId, updatedUserData, (error, result) => {
    if (error) {

      req.flash('error', 'Failed to update the account: ' + error);
    } else {

      req.flash('success', 'The user account updated successfully');
    }

    res.redirect('/edit/' + userId);
  });
});

// Inside the edit.ejs file
<% if (messages.error) { %>
  <div class="alert alert-danger" role="alert">
    <%= messages.error %>
  </div>
<% } %>
<% if (messages.success) { %>
  <div class="alert alert-success" role="alert">
    <%= messages.success %>
  </div>
<% } %>

update: (req, res, next) => {
  let userId = req.params.id,
    userParams = {
      name: {
        first: req.body.first,
        last: req.body.last,
      },
      email: req.body.email,
      password: req.body.password,
      zipCode: req.body.zipCode,
    };
  User.findByIdAndUpdate(userId, {
    $set: userParams,
  })
    .then((user) => {
      req.flash(
        "success",
        `${user.fullName}'s account updated successfully!`
      );
      res.locals.redirect = `/users/${userId}`;
      res.locals.user = user;
      next();
    })
    .catch((error) => {
      console.log(`Error updating user by ID: ${error.message}`);
      res.locals.redirect = "/users";
      req.flash(
        "error",
        `Failed to update the account becuase: ${error.message}`
      );
      next();
    });
},

//age validation
router.post('/register', validate, (req, res) => {

});

function validate(req, res, next) {
  const age = parseInt(req.body.age);

  if (age < 18 || age > 34) {
    req.flash('error', 'Age must be between 18 to 34 years old');
    return res.redirect('/register');
  }

  next();
}


 
Rubric
validate: (req, res, next) => {
    req
      .check("age", "Age must be between 18 to 34 years old")
      .isInt({ min: 18, max: 34 });
    req.getValidationResult().then((error) => {
      if (!error.isEmpty()) {
        let messages = error.array().map((e) => e.msg);
        req.skip = true;
        req.flash("error", messages.join(" and "));
        res.locals.redirect = "/register";
        next();
      } else {
        next();
      }
    });
  },
         